# Generated by Gemmini 2025-05-08

# Modified by Tom

# Prompt : "Python code for running a simple regression discontinuity design "

import pandas as pd
import numpy as np
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt

# Set a seed for reproducibility
np.random.seed(42)

# 1. Data Generation
num_observations = 500
cutoff = 50

# Create a running variable (e.g., pre-test scores)
running_variable = np.random.normal(loc=55, scale=15, size=num_observations)
running_variable = np.clip(running_variable, 0, 100) # Ensure scores are between 0 and 100

# Create a treatment indicator based on the cutoff (Sharp RDD)
# Treatment = 1 if running_variable >= cutoff, else 0
treatment = np.where(running_variable >= cutoff, 1, 0)

# Generate the outcome variable (e.g., final exam score)
# Assume a baseline relationship with the running variable
# and a treatment effect
baseline_effect = 10 + 0.8 * running_variable
treatment_effect_true = 10  # True effect of the tutoring
noise = np.random.normal(loc=0, scale=5, size=num_observations)

outcome_variable = baseline_effect + treatment_effect_true * treatment + noise
outcome_variable = np.clip(outcome_variable, 0, 100) # Ensure scores are between 0 and 100


# Create a Pandas DataFrame
data = pd.DataFrame({
    'running_variable': running_variable,
    'treatment': treatment,
    'outcome_variable': outcome_variable
})

# Center the running variable at the cutoff for easier interpretation of the intercept
data['running_variable_centered'] = data['running_variable'] - cutoff

print("Sample Data Head:")
print(data.head())
print(f"\nNumber of treated units: {data['treatment'].sum()}")
print(f"Number of control units: {num_observations - data['treatment'].sum()}")

# 2. Implementing RDD using statsmodels
# We fit a model allowing for different intercepts and slopes on either side of the cutoff.
# outcome_variable ~ c_running_variable + treatment + c_running_variable:treatment
# The coefficient for 'treatment' will be the estimated jump at the cutoff.

# For a simple model (local linear regression implied by the interaction):
# We can restrict the analysis to a window (bandwidth) around the cutoff.
# For simplicity in this example, we'll use all data, but in practice,
# bandwidth selection is crucial. A common approach is to use a polynomial
# (often linear) on each side of the cutoff.

# Model: Y = β0 + β1 * (X-c) + β2 * T + β3 * T * (X-c) + ε
# where:
# Y is the outcome_variable
# X is the running_variable
# c is the cutoff
# T is the treatment indicator (1 if X >= c, 0 otherwise)
# (X-c) is the centered running variable

# The treatment effect at the cutoff is β2.

rdd_model_formula = 'outcome_variable ~ running_variable_centered * treatment'
rdd_model = smf.ols(formula=rdd_model_formula, data=data).fit()

print("\nRDD Model Summary (using all data):")
print(rdd_model.summary())

# The coefficient for 'treatment' is the estimated effect at the cutoff.
estimated_effect = rdd_model.params['treatment']
print(f"\nEstimated Treatment Effect at the Cutoff: {estimated_effect:.4f}")

# 3. Visualization
plt.figure(figsize=(12, 8))
plt.scatter(data['running_variable'], data['outcome_variable'],
            c=data['treatment'], cmap='coolwarm', alpha=0.6, label='Observations by Treatment Status')

# Plot regression lines for each side of the cutoff
# For values below the cutoff (treatment=0)
x_below = np.linspace(data['running_variable'].min(), cutoff, 100)
y_below = rdd_model.params['Intercept'] + rdd_model.params['running_variable_centered'] * (x_below - cutoff)

# For values above the cutoff (treatment=1)
x_above = np.linspace(cutoff, data['running_variable'].max(), 100)
y_above = (rdd_model.params['Intercept'] + rdd_model.params['treatment']) + \
          (rdd_model.params['running_variable_centered'] + rdd_model.params['running_variable_centered:treatment']) * (x_above - cutoff)

plt.plot(x_below, y_below, color='blue', linestyle='-', linewidth=2, label='Fitted line (Control)')
plt.plot(x_above, y_above, color='red', linestyle='-', linewidth=2, label='Fitted line (Treatment)')

plt.axvline(x=cutoff, color='black', linestyle='--', label=f'Cutoff = {cutoff}')
plt.xlabel('Running Variable (Pre-test Score)')
plt.ylabel('Outcome Variable (Final Exam Score)')
plt.title('Regression Discontinuity Design')
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.savefig('RDD.png',bbox_inches='tight',dpi=120)

# 4. Using the `rdd` library (Optional - for more advanced features and RDD-specific tools)
# The `rdd` package by evan-magnusson can simplify some steps,
# like optimal bandwidth selection and specific RDD plots.
# Installation: pip install rdd
#
# try:
#     from rdd import rdd
#
#     # Using the original (non-centered) running variable with the rdd package
#     # Optimal bandwidth selection (Imbens-Kalyanaraman method is often default)
#     bandwidth_ik = rdd.optimal_bandwidth(data['outcome_variable'], data['running_variable'], cut=cutoff)
#     print(f"\nOptimal Bandwidth (Imbens-Kalyanaraman): {bandwidth_ik:.4f}")
#
#     # Create a new dataset with observations within the optimal bandwidth
#     data_rdd_optimal = rdd.truncated_data(data, 'running_variable', bandwidth_ik, cut=cutoff)
#
#     # Fit the RDD model using the rdd package (often local linear by default)
#     model_rdd_package = rdd.rdd(data_rdd_optimal, 'running_variable', 'outcome_variable', cut=cutoff)
#     print("\nRDD Model Summary (using rdd package with optimal bandwidth):")
#     print(model_rdd_package.fit().summary())
#     print(f"Estimated Treatment Effect from rdd package: {model_rdd_package.fit().params['T_WHATEVER_NAME_IT_GETS']:.4f}") # Check param name
#
#     # Plotting with rdd package (binned scatter plot)
#     data_binned = rdd.bin_data(data_rdd_optimal, 'outcome_variable', 'running_variable', n_bins=20) # n_bins can be adjusted
#
#     plt.figure(figsize=(12, 8))
#     plt.scatter(data_binned['x'], data_binned['y'], s=data_binned['n_obs'], facecolors='none', edgecolors='steelblue')
#     # You can overlay the fitted lines from the rdd_model_package if desired
#     plt.axvline(x=cutoff, color='black', linestyle='--', label=f'Cutoff = {cutoff}')
#     plt.xlabel('Running Variable (Binned)')
#     plt.ylabel('Outcome Variable (Average in Bin)')
#     plt.title('RDD Plot (Binned Averages using rdd package)')
#     plt.legend()
#     plt.grid(True, which='both', linestyle='--', linewidth=0.5)
#     plt.show()
#
# except ImportError:
#     print("\n`rdd` package not installed. Skipping this part. To install: pip install rdd")
# except Exception as e:
#     print(f"\nError using rdd package: {e}. Skipping this part.")